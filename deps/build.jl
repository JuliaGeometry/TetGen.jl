using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "tetgen", :tetgen),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeometry/TetgenBuilder/releases/download/v1.5.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/tetgen.aarch64-linux-gnu.tar.gz", "04b69f7d45c69a24f053dd30ff062114709ce9a591e89d4d8983d45f555a021b"),
    Linux(:aarch64, :musl) => ("$bin_prefix/tetgen.aarch64-linux-musl.tar.gz", "b34e9c015ee40d2033411ae00cdc2785a151464ed505d2452fb9db87192fe3dc"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/tetgen.arm-linux-gnueabihf.tar.gz", "98d5fc33ec0025f7b78a0ff6e6af1d2674a4345cb5471131234149543d28d62e"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/tetgen.arm-linux-musleabihf.tar.gz", "7a89a819fb276d6b4047aaa8c1b567ce66bae9019e9ca78ef04ab931c7caf3d9"),
    Linux(:i686, :glibc) => ("$bin_prefix/tetgen.i686-linux-gnu.tar.gz", "a92fff9a87b5e2281ec30beedf7cff59148a432c39ae2718e9ca16dc403a8a40"),
    Linux(:i686, :musl) => ("$bin_prefix/tetgen.i686-linux-musl.tar.gz", "91540bf8646767f450cf3525a08b593da61ad355f2d8212875ec595e9795d15f"),
    Windows(:i686) => ("$bin_prefix/tetgen.i686-w64-mingw32.tar.gz", "50f212a29962e1fd1679cd13eb3f093916012abe7c8979d08b1c3126c8c0659c"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/tetgen.powerpc64le-linux-gnu.tar.gz", "fbd693c5b120766efe63ea94d676c3078cab15566ebcb7bf36644d94f800dea1"),
    MacOS(:x86_64) => ("$bin_prefix/tetgen.x86_64-apple-darwin14.tar.gz", "1dbd785eefaf9440cd4679fcb83eb1b4928dcebb61d2b5eaca1e759ffddc2d91"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/tetgen.x86_64-linux-gnu.tar.gz", "f065ca15ee37ae2378e2791c3b62e93612878c6253cac0b567989499ae3bc89f"),
    Linux(:x86_64, :musl) => ("$bin_prefix/tetgen.x86_64-linux-musl.tar.gz", "e4be2c32d9cdb9032c37cfce3796d3539ea2619d548a52ecad1e1753bfa5bcc0"),
    FreeBSD(:x86_64) => ("$bin_prefix/tetgen.x86_64-unknown-freebsd11.1.tar.gz", "eb60bc0aa8021905cf16acef3745a9e09c5b24a2be63d414548a1abff68efde4"),
    Windows(:x86_64) => ("$bin_prefix/tetgen.x86_64-w64-mingw32.tar.gz", "359aa07faa2f7c2dade0d5ae1b60de5058261c8a816f54248bc2be30da105641"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
