using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, ".", :tetgen),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeometry/TetgenBuilder/releases/download/v1.5.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/tetgen.aarch64-linux-gnu.tar.gz", "b7442cb7d7204838c0fb43dc5462b56a3f7435e3d170c49a5879c8fd4bcd00b0"),
    Linux(:aarch64, :musl) => ("$bin_prefix/tetgen.aarch64-linux-musl.tar.gz", "da0c39c53c62662e4b6decc797e309706669bfc4dfe6851f840cc0ada42ca9b0"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/tetgen.arm-linux-gnueabihf.tar.gz", "a8d493d0be6aa59c902d362d18097bb0ccae10f4c0546df228db7fb40cd8f92f"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/tetgen.arm-linux-musleabihf.tar.gz", "e4f149126063f9124869e8be9501fb5f4fcf3d4cff5eb146f3a4f63a4e65bc8c"),
    Linux(:i686, :glibc) => ("$bin_prefix/tetgen.i686-linux-gnu.tar.gz", "42fa3ee3b555f34576f1a3941bdd64ab916c89137e90406ddba719239c5c35d9"),
    Linux(:i686, :musl) => ("$bin_prefix/tetgen.i686-linux-musl.tar.gz", "7c8ca56190ea3b51c23b7ba0991110432042e3c3c315cad8ed88c72cb57260ac"),
    Windows(:i686) => ("$bin_prefix/tetgen.i686-w64-mingw32.tar.gz", "b49666b833b38f5f61755b43789c072b9aba46a1d40eec224415d19510e88afc"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/tetgen.powerpc64le-linux-gnu.tar.gz", "c5f8993b8f54c4eafaf91c45cdb2bcdd9fa9cf53477ab12cd3e4049dc5e044a3"),
    MacOS(:x86_64) => ("$bin_prefix/tetgen.x86_64-apple-darwin14.tar.gz", "03da48c0dc22a4360d529f7b352e7f6c50931a6ed24a7bfc1afa58a2d383a607"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/tetgen.x86_64-linux-gnu.tar.gz", "ea522a5f4c20bbde6556a28a136e003979809822772c9916d9fda451abc96a35"),
    Linux(:x86_64, :musl) => ("$bin_prefix/tetgen.x86_64-linux-musl.tar.gz", "8ebf6eae27c201db6dd5a1aac7e6800d4976c7630785b16761a83e4b3a104de7"),
    FreeBSD(:x86_64) => ("$bin_prefix/tetgen.x86_64-unknown-freebsd11.1.tar.gz", "7daf52db0e8ca805fc8a343097489048ccd3801c0c8566890a2673ae807e95bb"),
    Windows(:x86_64) => ("$bin_prefix/tetgen.x86_64-w64-mingw32.tar.gz", "8b7e3f66adf97cc56a6ebca6597e8f0738c057716b74062509f6b07e2299eb5d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
